---
layout: post
title: 面试回顾 - Runtime（一）
date: 2018-01-10 00:43:0.000000000 +09:00
---

# Runtime

> Objective-C是门运行时的语言，编译时只能确定下来的最后要执行的函数名，最后程序运行时执行的什么内容，只有在运行中才能知道，因此这一特性加大了程序的灵活性，也为解决问题提供的更多的途径。

### Runtime的版本

需要注意的是，我们所说的`Runtime`其实是有**2**个版本的：

- Legacy： OC1.0版本时
    - 如果改变了实例变量的设计，需要重新编译它的子类。支持 32bit的OS X 程序
- Modern： OC2.0版本时
    - 如果改变了实例变量的设计，不需要重新编译它的子类。支持iphone程序和OS X10.5之后的64bit程序

### Runtime交互方式

既然`Runtime`能让代码更加的灵活，如何使用成为掌握它的第一步，有**3**种方式可以与其交互：

1. **Objective-C源代码**：通过编写OC代码，在执行的过程中，编译器会的根据代码生成包含了Runtime特性的数据
2. **NSObject类中定义的方法**：很多继承自NSObject的类，都集成了其父类中定义的方法，而其父类NSObject的一些方法是能直接向`Runtime`中获取信息的：`respondsToSelector`、`class`...
3. **Runtime函数**

## 消息转发

我们都知道，在C语言中，是存在多继承的，而OC没有，因此消息转发机制就赋予OC能实现类似多继承的效果。

`Runtime`在运行过程中，就像寻找东西一样，先在当前

平常能见到的`Runtime`代码都是下面这个样子的：

```
id objc_msgSend ( id self, SEL op, ... );
```

那么问题来了，这两个参数代表着什么，如何去理解这个消息转发。

**id**

`id`是一个**指针**，指向类实例的指针，它的定义是这样的：

```
typedef struct objc_object *id;
```

那么`objc_object`这个又是什么呢，通过`objc.h`文件可以找到相关代码：

```
#if !OBJC_TYPES_DEFINED
/// An opaque type that represents an Objective-C class.
typedef struct objc_class *Class;

/// Represents an instance of a class.
struct objc_object {
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;
};

/// A pointer to an instance of a class.
typedef struct objc_object *id;
#endif

/// An opaque type that represents a method selector.
typedef struct objc_selector *SEL;

/// A pointer to the function of a method implementation. 
#if !OBJC_OLD_DISPATCH_PROTOTYPES
typedef void (*IMP)(void /* id, SEL, ... */ ); 
#else
typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); 
#endif
```

这里能看到`objc_object`为结构体，内部含有一个`isa`指针。


PS：找这块代码的时候，我参考了很多文章，但是没有在`objc-private.h`文件中看到相关的代码，如果我找到的地方不正确，还请同学们多多包含，我会改正的。

**SEL**

`SEL`就是`selector`的一种表示方式，作为方法选择器，为了区分方法的**ID**。

Objc中经常使用`@selector()`，其实这里用的就是`SEL`，只不过表示类型不同（Swift中是`Selector`，Runtime中也不同）。

有一点需要注意的是，如果两个方法的名字相同，但是接受的参数类型不同，对于`SEL`来说，都对应了一个`selector`，因此**Cocoa**中的方法名字会好长好长(方便阅读理解的同时，就是避免这样的事情发生)。

其实我们日常中经常遇到，例如在封装某个model的时候，对于不同的`delegate`方法，会在方法名上加以区分，避免`respondsToSelector:(SEL)`出现问题。

**如何进行消息转发的呢？**
实际上在我们执行`[]`语句时，就已经发送消息了，不过只是将消息的接受者和消息括起来而已，到运行时会将消息与方法绑定实现起来。

这里有4个方法：

- `objc_msgSend`
- `objc_msgSend_stret`
- `objc_msgSendSuper`
- `objc_msgSendSuper_stret`

上面的4个方法都是传递消息，只不过接收消息的对象不同，类型也不同而已。在运行过程中，`selector`会从上面方法中任取一种执行，比如传递给**超类**，调用含有`super`相关的方法，以此类推。

消息传递的整个流程其实就是一个遍历寻找方法的过程

1. 找到当前类的IMP，通过`cache`找，找到了就执行
2. 若`cache`没找到，就去`dispatch_table`中找
3. 如果还没有，就去超类的`dispatch_table`中找，由于超类最终是继承`NSObject`，最后会一直找到`NSObject`为止
4. 如果还找不到就要开始进入动态方法解析了

![](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Art/messaging1.gif)


### 如何动态方法解析，将在下篇中做解释





